---
name: Nightly E2E tests run on testnet

on:
  schedule:
    - cron: "00 23 * * *"
  workflow_dispatch:

concurrency:
  group: "${{ github.ref }}-${{ github.workflow }}"
  cancel-in-progress: true

jobs:
  e2e-tests:
    name: Run E2E tests on testnet
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      RUSTC_WRAPPER: sccache
      CACHE_VERSION: 1
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Call action get-ref-properties
        id: get-ref-properties
        uses: Cardinal-Cryptography/github-actions/get-ref-properties@v7

      - name: Prepare Rust env
        uses: ./.github/actions/prepare-rust-env

      - name: Prepare Solidity environment
        uses: ./.github/actions/prepare-sol-env

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23

      - uses: pnpm/action-setup@v4
        with:
          version: 10.2.0

      - name: Get workflow run ID
        id: get-workflow-run-id
        uses: ./.github/actions/get-workflow-run-id
        with:
          workflow-name: on-push-main.yml
          full-sha: ${{ steps.get-ref-properties.outputs.full-sha }}
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Get artifact ID
        id: get-artifact-id
        uses: ./.github/actions/get-artifact-id
        with:
          workflow-run-id: ${{ steps.get-workflow-run-id.outputs.workflow-run-id }}
          github_token: ${{ secrets.CI_GH_TOKEN }}
          artifact-name: shielder-prover-tee-eif

      # yamllint disable rule:line-length
      - name: Build artifact download URL
        id: build-download-url
        shell: bash
        run: |
          ARTIFACT_ID="${{ steps.get-artifact-id.outputs.artifact-id }}"
          DOWNLOAD_URL="https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${ARTIFACT_ID}/zip"
          echo "Built download URL: $DOWNLOAD_URL"
          echo "download-url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT

      - name: Setup Prover Server
        id: setup-prover
        uses: ./.github/actions/setup-prover-server
        with:
          proxy_image: public.ecr.aws/p5g6f1p8/shielder-prover:${{ steps.get-ref-properties.outputs.sha }}
          eif_url: ${{ steps.build-download-url.outputs.download-url }}
          create: "true"
          ssh_private_key: ${{ secrets.TF_MODULES_PROVER_SERVER_PRIVATE_KEY }}
          aws_access_key_id: ${{ secrets.AWS_PROVERSERVER_DEVSTAGE_ACCESS_KEY }}
          aws_secret_access_key: ${{ secrets.AWS_PROVERSERVER_DEVSTAGE_SECRET_ACCESS_KEY }}

      # yamllint enable rule:line-length
      - name: Generate Solidity contracts
        run: make generate-verifier-contracts && make generate-poseidon-contracts

      - name: Compile eth contracts
        shell: bash
        run: make compile-contracts

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build shielder_bindings
        run: cd crates/shielder_bindings && make wasm && make wasm-without-circuits

      - name: Install dependencies (workspace)
        run: pnpm install-deps
        working-directory: ts

      - name: Build all (workspace)
        run: pnpm build
        working-directory: ts

      - name: Run e2e tooling tests (full wasm)
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.CI_TESTNET_DEPLOYER_PRIVATE_KEY }}
          ALICE_PUBLIC_KEY: ${{ vars.CI_TESTNET_ALICE_PUBLIC_KEY }}
          ALICE_PRIVATE_KEY: ${{ secrets.CI_TESTNET_ALICE_PRIVATE_KEY }}
          BOB_PUBLIC_KEY: ${{ vars.CI_TESTNET_BOB_PUBLIC_KEY }}
          BOB_PRIVATE_KEY: ${{ secrets.CI_TESTNET_BOB_PRIVATE_KEY }}
          CHARLIE_PUBLIC_KEY: ${{ vars.CI_TESTNET_CHARLIE_PUBLIC_KEY }}
          CHARLIE_PRIVATE_KEY: ${{ secrets.CI_TESTNET_CHARLIE_PRIVATE_KEY }}
          TS_SDK_PUBLIC_KEY: ${{ vars.CI_TESTNET_TS_SDK_PUBLIC_KEY }}
          TS_SDK_PRIVATE_KEY: ${{ secrets.CI_TESTNET_TS_SDK_PRIVATE_KEY }}
          FEE_DESTINATION: ${{ vars.CI_TESTNET_FEE_DESTINATION }}
          FEE_DESTINATION_KEY: ${{ secrets.CI_TESTNET_FEE_DESTINATION_KEY }}
          RELAYER_SIGNER_ADDRESSES: ${{ vars.CI_TESTNET_RELAYER_SIGNER_ADDRESSES }}
          RELAYER_SIGNING_KEYS: ${{ secrets.CI_TESTNET_RELAYER_SIGNING_KEYS }}
          CRYPTO_CLIENT_TYPE: "wasm-full"
        run: |
          NO_FORMATTING=true TESTNET=true ./tooling-e2e-tests/ts_sdk_tests.sh

      - name: Run e2e tooling tests (proving server)
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.CI_TESTNET_DEPLOYER_PRIVATE_KEY }}
          ALICE_PUBLIC_KEY: ${{ vars.CI_TESTNET_ALICE_PUBLIC_KEY }}
          ALICE_PRIVATE_KEY: ${{ secrets.CI_TESTNET_ALICE_PRIVATE_KEY }}
          BOB_PUBLIC_KEY: ${{ vars.CI_TESTNET_BOB_PUBLIC_KEY }}
          BOB_PRIVATE_KEY: ${{ secrets.CI_TESTNET_BOB_PRIVATE_KEY }}
          CHARLIE_PUBLIC_KEY: ${{ vars.CI_TESTNET_CHARLIE_PUBLIC_KEY }}
          CHARLIE_PRIVATE_KEY: ${{ secrets.CI_TESTNET_CHARLIE_PRIVATE_KEY }}
          TS_SDK_PUBLIC_KEY: ${{ vars.CI_TESTNET_TS_SDK_PUBLIC_KEY }}
          TS_SDK_PRIVATE_KEY: ${{ secrets.CI_TESTNET_TS_SDK_PRIVATE_KEY }}
          FEE_DESTINATION: ${{ vars.CI_TESTNET_FEE_DESTINATION }}
          FEE_DESTINATION_KEY: ${{ secrets.CI_TESTNET_FEE_DESTINATION_KEY }}
          RELAYER_SIGNER_ADDRESSES: ${{ vars.CI_TESTNET_RELAYER_SIGNER_ADDRESSES }}
          RELAYER_SIGNING_KEYS: ${{ secrets.CI_TESTNET_RELAYER_SIGNING_KEYS }}
          CRYPTO_CLIENT_TYPE: "wasm-light"
          SKIP_NITRO_ATTESTATION: true
          PROVER_SERVER_URL: ${{ steps.setup-prover.outputs.proxy_url }}
        run: |
          NO_FORMATTING=true TESTNET=true ./tooling-e2e-tests/ts_sdk_tests.sh

  destroy-prover-server:
    name: Destroy Prover Server
    runs-on: ubuntu-22.04
    if: always()
    needs: e2e-tests
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      # yamllint disable rule:line-length
      - name: Destroy Prover Server
        uses: ./.github/actions/setup-prover-server
        with:
          proxy_image: "unused-for-destroy"
          eif_url: "unused-for-destroy"
          destroy: "true"
          ssh_private_key: ${{ secrets.TF_MODULES_PROVER_SERVER_PRIVATE_KEY }}
          aws_access_key_id: ${{ secrets.AWS_PROVERSERVER_DEVSTAGE_ACCESS_KEY }}
          aws_secret_access_key: ${{ secrets.AWS_PROVERSERVER_DEVSTAGE_SECRET_ACCESS_KEY }}

      # yamllint enable rule:line-length

  slack-notification:
    name: Slack notification
    runs-on: ubuntu-22.04
    needs: [e2e-tests]
    if: >
      !cancelled() &&
      github.event_name != 'workflow_dispatch'
    steps:
      - name: Send Slack message
        uses: Cardinal-Cryptography/github-actions/slack-notification@v7
        with:
          notify-on: "failure"
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_BLANKSQUARE_NOTIFICATIONS }}
